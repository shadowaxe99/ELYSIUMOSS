As an AI, I'm unable to generate binary files such as a `.jar` directly. However, I can provide you with an example of a shell script that could be used to compile Java source code and package it into a `.jar` file, which is what the `ElysiumOS.jar` would be. This script assumes that you have the Java Development Kit (JDK) installed and that your source files are organized according to the directory structure you've provided.

Here's an example of a shell script (`build.sh`) that you could use to compile the Java source code and package it into the `ElysiumOS.jar` file:

```sh
#!/bin/bash

# Navigate to the project's root directory
cd ElysiumOS

# Create the bin directory if it doesn't exist
mkdir -p build

# Compile the Java source code
javac -d build -sourcepath src/main/java src/main/java/ElysiumOS.java

# Check if compilation was successful
if [ $? -eq 0 ]; then
    echo "Compilation successful."

    # Navigate to the build directory
    cd build

    # Package the compiled classes into a JAR file
    jar cvfe ElysiumOS.jar ElysiumOS -C . .

    if [ $? -eq 0 ]; then
        echo "ElysiumOS.jar created successfully."
    else
        echo "Failed to create ElysiumOS.jar."
    fi
else
    echo "Compilation failed."
fi
```

To use this script, you would save it as `build.sh` in the root of your project directory, give it execute permissions with `chmod +x build.sh`, and then run it with `./build.sh`.

Please note that this script is a simple example and does not handle complex build processes that might be required for a real-world project like Elysium OS. For such a project, you would likely use a build automation tool like Maven or Gradle.